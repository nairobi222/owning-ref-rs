var N = null;var searchIndex = {};
searchIndex["owning_ref"]={"doc":"An owning reference.","items":[[8,"StableAddress","owning_ref","An unsafe marker trait for types that deref to a stable…",N,N],[8,"CloneStableAddress","","An unsafe marker trait for types where clones deref to the…",N,N],[3,"OwningRef","","An owning reference.",N,N],[3,"OwningRefMut","","An mutable owning reference.",N,N],[3,"OwningHandle","","`OwningHandle` is a complement to `OwningRef`. Where…",N,N],[6,"BoxRef","","Typedef of a owning reference that uses a `Box` as the…",N,N],[6,"VecRef","","Typedef of a owning reference that uses a `Vec` as the…",N,N],[6,"StringRef","","Typedef of a owning reference that uses a `String` as the…",N,N],[6,"RcRef","","Typedef of a owning reference that uses a `Rc` as the owner.",N,N],[6,"ArcRef","","Typedef of a owning reference that uses a `Arc` as the…",N,N],[6,"RefRef","","Typedef of a owning reference that uses a `Ref` as the…",N,N],[6,"RefMutRef","","Typedef of a owning reference that uses a `RefMut` as the…",N,N],[6,"MutexGuardRef","","Typedef of a owning reference that uses a `MutexGuard` as…",N,N],[6,"RwLockReadGuardRef","","Typedef of a owning reference that uses a…",N,N],[6,"RwLockWriteGuardRef","","Typedef of a owning reference that uses a…",N,N],[6,"BoxRefMut","","Typedef of a mutable owning reference that uses a `Box` as…",N,N],[6,"VecRefMut","","Typedef of a mutable owning reference that uses a `Vec` as…",N,N],[6,"StringRefMut","","Typedef of a mutable owning reference that uses a `String`…",N,N],[6,"RefMutRefMut","","Typedef of a mutable owning reference that uses a `RefMut`…",N,N],[6,"MutexGuardRefMut","","Typedef of a mutable owning reference that uses a…",N,N],[6,"RwLockWriteGuardRefMut","","Typedef of a mutable owning reference that uses a…",N,N],[6,"ErasedBoxRef","","Typedef of a owning reference that uses an erased `Box` as…",N,N],[6,"ErasedRcRef","","Typedef of a owning reference that uses an erased `Rc` as…",N,N],[6,"ErasedArcRef","","Typedef of a owning reference that uses an erased `Arc` as…",N,N],[6,"ErasedBoxRefMut","","Typedef of a mutable owning reference that uses an erased…",N,N],[8,"Erased","","Helper trait for an erased concrete type an owner…",N,N],[8,"IntoErased","","Helper trait for erasing the concrete type of what an…",N,N],[16,"Erased","","Owner with the dereference type substituted to `Erased`.",0,N],[10,"into_erased","","Perform the type erasure.",0,N],[8,"ToHandle","","Trait to implement the conversion of owner to handle for…",N,N],[16,"Handle","","The type of handle to be encapsulated by the OwningHandle.",1,N],[10,"to_handle","","Given an appropriately-long-lived pointer to ourselves,…",1,N],[8,"ToHandleMut","","Trait to implement the conversion of owner to mutable…",N,N],[16,"HandleMut","","The type of handle to be encapsulated by the OwningHandle.",2,N],[10,"to_handle_mut","","Given an appropriately-long-lived pointer to ourselves,…",2,N],[11,"new","","Creates a new owning reference from a owner initialized to…",3,[[["o"]],["self"]]],[11,"new_assert_stable_address","","Like `new`, but doesn’t require `O` to implement the…",3,[[["o"]],["self"]]],[11,"map","","Converts `self` into a new owning reference that points at…",3,[[["self"],["f"]],["owningref"]]],[11,"try_map","","Tries to convert `self` into a new owning reference that…",3,[[["self"],["f"]],["result",["owningref"]]]],[11,"map_owner","","Converts `self` into a new owning reference with a…",3,[[["self"],["f"]],["owningref"]]],[11,"map_owner_box","","Converts `self` into a new owning reference where the…",3,[[["self"]],["owningref",["box"]]]],[11,"erase_owner","","Erases the concrete base type of the owner with a trait…",3,[[["self"]],["owningref"]]],[11,"as_owner","","A reference to the underlying owner.",3,[[["self"]],["o"]]],[11,"into_owner","","Discards the reference and retrieves the owner.",3,[[["self"]],["o"]]],[11,"new","","Creates a new owning reference from a owner initialized to…",4,[[["o"]],["self"]]],[11,"new_assert_stable_address","","Like `new`, but doesn’t require `O` to implement the…",4,[[["o"]],["self"]]],[11,"map","","Converts `self` into a new shared owning reference that…",4,[[["self"],["f"]],["owningref"]]],[11,"map_mut","","Converts `self` into a new mutable owning reference that…",4,[[["self"],["f"]],["owningrefmut"]]],[11,"try_map","","Tries to convert `self` into a new shared owning reference…",4,[[["self"],["f"]],["result",["owningref"]]]],[11,"try_map_mut","","Tries to convert `self` into a new mutable owning…",4,[[["self"],["f"]],["result",["owningrefmut"]]]],[11,"map_owner","","Converts `self` into a new owning reference with a…",4,[[["self"],["f"]],["owningrefmut"]]],[11,"map_owner_box","","Converts `self` into a new owning reference where the…",4,[[["self"]],["owningrefmut",["box"]]]],[11,"erase_owner","","Erases the concrete base type of the owner with a trait…",4,[[["self"]],["owningrefmut"]]],[11,"as_owner","","A reference to the underlying owner.",4,[[["self"]],["o"]]],[11,"as_owner_mut","","A mutable reference to the underlying owner.",4,[[["self"]],["o"]]],[11,"into_owner","","Discards the reference and retrieves the owner.",4,[[["self"]],["o"]]],[11,"new","","Create a new `OwningHandle` for a type that implements…",5,[[["o"]],["self"]]],[11,"new_mut","","Create a new mutable `OwningHandle` for a type that…",5,[[["o"]],["self"]]],[11,"new_with_fn","","Create a new OwningHandle. The provided callback will be…",5,[[["o"],["f"]],["self"]]],[11,"try_new","","Create a new OwningHandle. The provided callback will be…",5,[[["o"],["f"]],["result"]]],[11,"as_owner","","A getter for the underlying owner.",5,[[["self"]],["o"]]],[11,"into_owner","","Discards the dependent object and returns the owner.",5,[[["self"]],["o"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"as_mut","","",4,[[["self"]],["t"]]],[11,"eq","","",3,[[["self"],["self"]],["bool"]]],[11,"eq","","",4,[[["self"],["self"]],["bool"]]],[11,"as_ref","","",3,[[["self"]],["t"]]],[11,"as_ref","","",4,[[["self"]],["t"]]],[11,"cmp","","",3,[[["self"],["self"]],["ordering"]]],[11,"cmp","","",4,[[["self"],["self"]],["ordering"]]],[11,"clone","","",3,[[["self"]],["self"]]],[11,"from","","",3,[[["o"]],["self"]]],[11,"from","","",4,[[["o"]],["self"]]],[11,"from","","",3,[[["owningrefmut"]],["self"]]],[11,"partial_cmp","","",3,[[["self"],["self"]],["option",["ordering"]]]],[11,"partial_cmp","","",4,[[["self"],["self"]],["option",["ordering"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result",["error"]]]],[11,"deref_mut","","",5,N],[11,"deref_mut","","",4,[[["self"]],["t"]]],[11,"hash","","",3,[[["self"],["h"]]]],[11,"hash","","",4,[[["self"],["h"]]]],[11,"deref","","",5,N],[11,"deref","","",3,[[["self"]],["t"]]],[11,"deref","","",4,[[["self"]],["t"]]],[11,"borrow","","",3,[[["self"]],["t"]]]],"paths":[[8,"IntoErased"],[8,"ToHandle"],[8,"ToHandleMut"],[3,"OwningRef"],[3,"OwningRefMut"],[3,"OwningHandle"],[8,"Erased"]]};
searchIndex["stable_deref_trait"]={"doc":"This module defines an unsafe marker trait, StableDeref,…","items":[[8,"StableDeref","stable_deref_trait","An unsafe marker trait for types that deref to a stable…",N,N],[8,"CloneStableDeref","","An unsafe marker trait for types where clones deref to the…",N,N]],"paths":[]};
initSearch(searchIndex);addSearchOptions(searchIndex);
